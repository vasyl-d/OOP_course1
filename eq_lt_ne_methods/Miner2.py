from random import randint

class Cell:
    '''__is_mine - –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ True/False; True - –≤ –∫–ª–µ—Ç–∫–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –º–∏–Ω–∞, False - –º–∏–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç;
        __number - —á–∏—Å–ª–æ –º–∏–Ω –≤–æ–∫—Ä—É–≥ –∫–ª–µ—Ç–∫–∏ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 8);
        __is_open - —Ñ–ª–∞–≥ —Ç–æ–≥–æ, –æ—Ç–∫—Ä—ã—Ç–∞ –∫–ª–µ—Ç–∫–∞ –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç–∞: True - –æ—Ç–∫—Ä—ã—Ç–∞; False - –∑–∞–∫—Ä—ã—Ç–∞.'''
    def __init__(self, is_mine:bool=False, number:int=0, is_open:bool=False):
            self.is_mine = is_mine
            self.number = number
            self.is_open = is_open
 
    def __bool__(self):
        return not self.is_mine
    
    @property
    def is_open(self):
        return self.__is_open

    @is_open.setter
    def is_open(self, value):
        if type(value) is bool:
            self.__is_open = value
        else:
            raise ValueError("–Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞")

    @property
    def is_mine(self):
        return self.__is_mine

    @is_mine.setter
    def is_mine(self, value):
        if type(value) is bool:
            self.__is_mine = value
        else:
            raise ValueError("–Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞")

    @property
    def number(self):
        return self.__number

    @number.setter
    def number(self, value):
        if type(value) is int and 0 <= value <= 8:
            self.__number = value
        else:
            raise ValueError("–Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞")

    def __str__(self):
        s = "üçÄ"
        if self.is_open:
            s = "üò±" if self.is_mine else "üç•"
        return s

class GamePole:
    #singletom
    __pole_cells: list = []
    __instance_id = None
    def __new__(cls, *args, **kwargs):
        if cls.__instance_id is None:
            cls.__instance_id = super().__new__(cls)
        return cls.__instance_id

    def __init__(self, N:int=2, M:int=2, total_mines:int=2):
        if type(N) is int and type(M) is int and type(total_mines) is int and 0 <= N and 0 < M and 0 < total_mines < M*N:
            self.rows = N
            self.cols = M
            self.total_mines = total_mines
        else:
            raise ValueError("–Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞")

    @property
    def pole(self):
        return self.__pole_cells

    @pole.setter
    def pole(self, value):
        #pole - readonly property
        pass

    def init_pole(self):
        # - –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è (—Ä–∞—Å—Å—Ç–∞–≤–ª—è–µ—Ç –º–∏–Ω—ã –∏ –¥–µ–ª–∞–µ—Ç –≤—Å–µ –∫–ª–µ—Ç–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã–º–∏);
        #—Å–æ–∑–¥–∞–µ–º –Ω–∞–±–æ—Ä –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –º–∏–Ω
        self.minerows = set()
        while len(self.minerows) < self.total_mines:
            x = randint(0,self.rows - 1)
            y = randint(0,self.cols - 1)
            self.minerows.add((x, y))
        #—Å–æ–∑–¥–∞–µ–º –¥–≤—É–º–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ - –ø–æ–ª–µ –∏ —Ä–∞—Å—Å—Ç–∞–≤–ª—è–µ–º –º–∏–Ω—ã
        self.__pole_cells = [[Cell(is_mine=True, number=self._count_mines(r,c)) if (r,c) in self.minerows else Cell(is_mine=False, number=self._count_mines(r,c)) for c in range(self.cols) ] for r in range(self.rows)]


    def _count_mines(self, x, y):
        min_r = 0 if x <= 0 else x-1
        max_r = x + 2 if x < self.rows else x
        min_c = 0 if y <= 0 else y-1
        max_c = y + 2 if y < self.cols else y
        return sum([1 if (r, c) in self.minerows else 0 for c in range(min_c, max_c) for r in range(min_r, max_r)])       
        
    def open_cell(self, i, j):
        # - –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —è—á–µ–π–∫—É —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ (i, j); –Ω—É–º–µ—Ä–∞—Ü–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –Ω—É–ª—è; –º–µ—Ç–æ–¥ –º–µ–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞ 
        # __is_open –æ–±—ä–µ–∫—Ç–∞ Cell –≤ —è—á–µ–π–∫–µ (i, j) –Ω–∞ True;
        if (0 <= i < self.rows) and (0 <= j < self.cols):
            self.__pole_cells[i][j].is_open = True
        else:
            raise IndexError('–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã i, j –∫–ª–µ—Ç–∫–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è')

    def show_pole(self):
        # - –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –≤ –∫–æ–Ω—Å–æ–ª–∏ (–∫–∞–∫ –∏–º–µ–Ω–Ω–æ —Å–¥–µ–ª–∞—Ç—å - –Ω–∞ –≤–∞—à–µ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ, —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ - –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ).
        [print(r[c],('\n' if c == self.cols-1 else ' '), end='', sep='')  for r in self.__pole_cells for c in range(self.cols)]

pole = GamePole(10, 20, 10)  # —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø–æ–ª–µ —Ä–∞–∑–º–µ—Ä–∞–º–∏ 10x20 —Å –æ–±—â–∏–º —á–∏—Å–ª–æ–º –º–∏–Ω 10
pole.init_pole()
print("before")
pole.show_pole()
if pole.pole[0][1]:
    pole.open_cell(0, 1)
if pole.pole[3][5]:
    pole.open_cell(3, 5)
print("after:")
pole.show_pole()

#tests

p1 = GamePole(10, 20, 10)
p2 = GamePole(10, 20, 10)
assert id(p1) == id(p2), "—Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç–æ–≤ –∫–ª–∞—Å—Å–∞ GamePole"
p = p1

cell = Cell()
assert type(Cell.is_mine) == property and type(Cell.number) == property and type(Cell.is_open) == property, "–≤ –∫–ª–∞—Å—Å–µ Cell –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—ä–µ–∫—Ç—ã-—Å–≤–æ–π—Å—Ç–≤–∞ is_mine, number, is_open"

cell.is_mine = True
cell.number = 5
cell.is_open = True
assert bool(cell) == False, "—Ñ—É–Ω–∫—Ü–∏—è bool() –≤–µ—Ä–Ω—É–ª–∞ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"

try:
    cell.is_mine = 10
except ValueError:
    assert True
else:
    assert False, "–Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–æ—Å—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ ValueError"

    
try:
    cell.number = 10
except ValueError:
    assert True
else:
    assert False, "–Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–æ—Å—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ ValueError"

p.init_pole()
m = 0
for row in p.pole:
    for x in row:
        assert isinstance(x, Cell), "–∫–ª–µ—Ç–∫–∞–º–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—ä–µ–∫—Ç—ã –∫–ª–∞—Å—Å–∞ Cell"
        if x.is_mine:
            m += 1

assert m == 10, "–Ω–∞ –ø–æ–ª–µ —Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω"
p.open_cell(0, 1)
p.open_cell(9, 19)

try:
    p.open_cell(10, 20)
except IndexError:
    assert True
else:
    assert False, "–Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–æ—Å—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ IndexError"


def count_mines(pole, i, j):
    n = 0
    for k in range(-1, 2):
        for l in range(-1, 2):
            ii, jj = k+i, l+j
            if ii < 0 or ii > 9 or jj < 0 or jj > 19:
                continue
            if pole[ii][jj].is_mine:
                n += 1
                
    return n


for i, row in enumerate(p.pole):
    for j, x in enumerate(row):
        if not p.pole[i][j].is_mine:
            m = count_mines(p.pole, i, j)
            assert m == p.pole[i][j].number, "–Ω–µ–≤–µ—Ä–Ω–æ –ø–æ–¥—Å—á–∏—Ç–∞–Ω–æ —á–∏—Å–ª–æ –º–∏–Ω –≤–æ–∫—Ä—É–≥ –∫–ª–µ—Ç–∫–∏"